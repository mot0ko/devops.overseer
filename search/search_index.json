{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"devops.overseer","text":"<p>A DevOps helper python module to monitor and automate all kinds of tasks related to either process, migrations, reporting, monitoring etc.</p>"},{"location":"index.html#installation","title":"Installation","text":"<p>Clone the repository and <code>cd</code> into it.</p>"},{"location":"index.html#virtual-environment","title":"Virtual environment","text":"<p>Make sure you have <code>vevn</code> installed (example on Ubuntu: <code>sudo apt install python3-venv</code>). From the root of the repository, if you don't have another preference onto where to get the venv, just create it here:</p> <p><code>python3 -v venv ./.venv</code></p> <p>INFO: The <code>venv</code> directory is ignored at the root.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<p>Just install both requirements file in your virtual environment to make sure you have access to all the processes:</p> <pre><code>pip install -r ./requirements.dev.txt\npip install -r ./requirements.txt\n</code></pre>"},{"location":"index.html#building","title":"Building","text":"<p>You can simply build the package after pip installing both requirements file using this command:</p> <p><code>python3 -m build</code></p>"},{"location":"index.html#installation_1","title":"Installation","text":""},{"location":"index.html#locally","title":"Locally","text":"<p>just run the usual pip install:</p> <p><code>pip install .</code></p>"},{"location":"index.html#calling-the-cli","title":"Calling the CLI","text":"<p>You should now be able to just call <code>devops-overseer</code> from your current shell while having your virtual environment activated</p>"},{"location":"index.html#contributing","title":"Contributing","text":""},{"location":"index.html#commiting","title":"Commiting","text":"<p>This repository tries to follow as best as it cana the conventional commits specification. The accepted types for commit messages are: - feat - fix - docs - style - refactor - perf - test - build - ci - chore - revert</p>"},{"location":"index.html#commands","title":"Commands","text":"<ul> <li><code>devops-overseer</code> - CLI call (parameters will come).</li> </ul>"},{"location":"index.html#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/         # mkdocs documentation\nsrc/          # main source directory\ntests/        # unit tests directory\n</code></pre>"},{"location":"index.html#full-documentation","title":"Full documentation","text":"<p>You can find the full documentation here</p>"},{"location":"getting-started.html","title":"Installation","text":"<p>Clone the repository and <code>cd</code> into it.</p>"},{"location":"getting-started.html#virtual-environment","title":"Virtual environment","text":"<p>Make sure you have <code>vevn</code> installed (example on Ubuntu: <code>sudo apt install python3-venv</code>). From the root of the repository, if you don't have another preference onto where to get the venv, just create it here:</p> <p><code>python3 -v venv ./.venv</code></p> <p>INFO: The <code>venv</code> directory is ignored at the root.</p>"},{"location":"getting-started.html#requirements","title":"Requirements","text":"<p>Just install both requirements file in your virtual environment to make sure you have access to all the processes:</p> <pre><code>pip install -r ./requirements.dev.txt\npip install -r ./requirements.txt\n</code></pre>"},{"location":"getting-started.html#building","title":"Building","text":"<p>You can simply build the package after pip installing both requirements file using this command:</p> <p><code>python3 -m build</code></p>"},{"location":"getting-started.html#installation_1","title":"Installation","text":""},{"location":"getting-started.html#locally","title":"Locally","text":"<p>just run the usual pip install:</p> <p><code>pip install .</code></p>"},{"location":"getting-started.html#calling-the-cli","title":"Calling the CLI","text":"<p>You should now be able to just call <code>devops-overseer</code> from your current shell while having your virtual environment activated</p>"},{"location":"getting-started.html#contributing","title":"Contributing","text":""},{"location":"getting-started.html#commiting","title":"Commiting","text":"<p>This repository tries to follow as best as it cana the conventional commits specification. The accepted types for commit messages are: - feat - fix - docs - style - refactor</p>"},{"location":"clients/client-configuration.html","title":"Reste client Configuration","text":"<p>This file defines how DevOps Overseer connects to a REST API using its configuration. If mostly contains the usual REST API client settings in addition of some internal commodities (like the <code>include</code> field). The authentication settings are defined in there own documentation due to multiple features of redirection and reusability for local users that are clearly out of scope for this configuration documentation.</p>"},{"location":"clients/client-configuration.html#general-fields","title":"General fields","text":""},{"location":"clients/client-configuration.html#include","title":"<code>include</code>","text":"<p><pre><code>include:\n  - \"~/.devops-overseer/confluence-cloud.yml\"\n  - \"./.devops-overseer/confluence-cloud.yml\"\n  - \"~/.config/devops-overseer/confluence-cloud.yml\"\n  - \"~/.config/devops-overseer/configs/clients/confluence-cloud.yml\"\n</code></pre> - Purpose: additional configuration files to merge or override values from. - Typical usage:   - Global config in <code>$HOME/.devops-overseer/</code>   - Project-specific config in <code>./.devops-overseer/</code>   - Centralized config in <code>$HOME/.config/devops-overseer/</code></p> <p>Usually the credentials configuration will be stored in those, as for base-urls, because they change from user to user and are defined in the user specific fields section.</p>"},{"location":"clients/client-configuration.html#logger","title":"<code>logger</code>","text":"<p><pre><code>logger:\n  name: confluence-cloud\n</code></pre> - Fields:   - <code>name</code>: name for the logger instance. Used for filtering, formatting, or sending logs to specific outputs.</p>"},{"location":"clients/client-configuration.html#user-agent","title":"<code>user-agent</code>","text":"<p><pre><code>user-agent: devops-overseer-RestClient/1.0\n</code></pre> - Purpose: the <code>User-Agent</code> header attached to all requests. - Default/Example: <code>\"devops-overseer-RestClient/1.0\"</code></p>"},{"location":"clients/client-configuration.html#timeout","title":"<code>timeout</code>","text":"<p><pre><code>timeout: 15.0\n</code></pre> - Purpose: maximum time to wait for an HTTP request before failing.</p>"},{"location":"clients/client-configuration.html#max-retries","title":"<code>max-retries</code>","text":"<p><pre><code>max-retries: 3\n</code></pre> - Purpose: number of times to retry failed HTTP requests before giving up.</p>"},{"location":"clients/client-configuration.html#backoff-factor","title":"<code>backoff-factor</code>","text":"<p><pre><code>backoff-factor: 0.5\n</code></pre> - Purpose: delay multiplier for retries (exponential backoff).   - Example: with <code>backoff-factor: 0.5</code>, retries will wait <code>0.5s</code>, <code>1s</code>, <code>2s</code>, etc.</p>"},{"location":"clients/client-configuration.html#extra-headers","title":"<code>extra-headers</code>","text":"<p><pre><code>extra-headers:\n</code></pre> - Purpose: additional HTTP headers to include in every request. - Default: empty (no extra headers).</p>"},{"location":"clients/client-configuration.html#endpoints","title":"<code>endpoints</code>","text":"<p><pre><code>endpoints:\n  myself:\n    path: /rest/api/3/myself\n</code></pre> - Purpose: defines API endpoints with their relative paths, to be called with their identifiers in the code (calling <code>myself</code> directly).. - Example:   - <code>myself</code>: the <code>myself</code> example is often present in REST APIs giving access to your own profile (like Atlassian for example).   - <code>path</code>: relative URL path (<code>/rest/api/3/myself</code>).</p>"},{"location":"clients/client-configuration.html#user-specific-fields","title":"User specific fields","text":""},{"location":"clients/client-configuration.html#base-url","title":"<code>base-url</code>","text":"<p><pre><code>base-url: &lt;base-url&gt;\n</code></pre> - Purpose: the <code>base-url</code> is literally the base url when you visit you tool instance. - Default/Example: <code>\"https://api.github.com\"</code> for github.</p>"},{"location":"clients/client-configuration.html#credentials","title":"<code>credentials</code>","text":"<p><pre><code>credentials:\n</code></pre> - Purpose: the <code>credentials</code> contains the credentials/authentication configuration and is defined in the credentials documentation page.</p>"}]}